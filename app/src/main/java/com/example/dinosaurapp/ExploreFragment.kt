package com.example.dinosaurapp

import android.os.Bundle
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.TextView
import androidx.fragment.app.Fragment
import androidx.recyclerview.widget.LinearLayoutManager
import androidx.recyclerview.widget.RecyclerView
import android.app.AlertDialog

/**
 * Fragment para explorar sitios de inter√©s del per√≠odo
 */
class ExploreFragment : Fragment() {

    private lateinit var rvExplorationSites: RecyclerView
    private lateinit var explorationAdapter: ExplorationSiteAdapter
    private lateinit var tvExplorationDescription: TextView
    private var periodId: String = ""

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        arguments?.let {
            periodId = it.getString(ARG_PERIOD_ID) ?: ""
        }
    }

    override fun onCreateView(
        inflater: LayoutInflater,
        container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View? {
        return inflater.inflate(R.layout.fragment_explore, container, false)
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)
        
        initializeViews(view)
        setupRecyclerView()
        setupDescription()
        
        // Aplicar animaci√≥n de entrada
        view.alpha = 0f
        view.animate()
            .alpha(1f)
            .setDuration(500)
            .start()
    }

    private fun initializeViews(view: View) {
        rvExplorationSites = view.findViewById(R.id.rvExplorationSites)
        tvExplorationDescription = view.findViewById(R.id.tvExplorationDescription)
    }

    private fun setupRecyclerView() {
        val explorationSites = createExplorationSitesData(periodId)
        
        explorationAdapter = ExplorationSiteAdapter(explorationSites) { site ->
            showSiteDetails(site)
        }
        
        rvExplorationSites.apply {
            layoutManager = LinearLayoutManager(context)
            adapter = explorationAdapter
            // A√±adir animaci√≥n sutil
            alpha = 0f
            animate()
                .alpha(1f)
                .setDuration(300)
                .setStartDelay(200)
                .start()
        }
    }

    private fun setupDescription() {
        val description = when (periodId) {
            "triassic" -> "Explora los primeros ecosistemas donde aparecieron los dinosaurios tras la gran extinci√≥n del P√©rmico."
            "jurassic" -> "Descubre los sitios donde dominaron los gigantescos saur√≥podos y primeros ter√≥podos."
            "cretaceous" -> "Investiga los √∫ltimos h√°bitats de los dinosaurios antes de su extinci√≥n masiva."
            "devonian" -> "Sum√©rgete en los oc√©anos donde evolucionaron los primeros vertebrados terrestres."
            "carboniferous" -> "Explora los vastos bosques pantanosos que formaron los dep√≥sitos de carb√≥n."
            "permian" -> "Descubre los ecosistemas dominados por los antecesores de los mam√≠feros."
            "paleogene" -> "Investiga el renacimiento de la vida tras la extinci√≥n de los dinosaurios."
            "neogene" -> "Explora la diversificaci√≥n de mam√≠feros en las nuevas praderas."
            "quaternary" -> "Descubre los h√°bitats de la megafauna pleistocena y la evoluci√≥n humana."
            else -> "Descubre los sitios m√°s fascinantes de este per√≠odo geol√≥gico."
        }
        
        tvExplorationDescription.text = description
    }

    private fun showSiteDetails(site: ExplorationSite) {
        val dialogBuilder = AlertDialog.Builder(requireContext())
        dialogBuilder.setTitle("üèõÔ∏è ${site.name}")
        
        val detailedInfo = getDetailedSiteInfo(site, periodId)
        dialogBuilder.setMessage(detailedInfo)
        
        dialogBuilder.setPositiveButton("¬°Fascinante!") { dialog, _ ->
            dialog.dismiss()
        }
        
        dialogBuilder.setNeutralButton("Ver m√°s sitios") { dialog, _ ->
            dialog.dismiss()
        }
        
        val dialog = dialogBuilder.create()
        dialog.show()
    }

    private fun getDetailedSiteInfo(site: ExplorationSite, periodId: String): String {
        return when (site.id) {
            "site_1" -> buildString {
                append("üìç ${site.description}\n\n")
                append("üîç Descubrimientos importantes:\n")
                append("‚Ä¢ Esqueletos completos de especies representativas\n")
                append("‚Ä¢ Evidencia de comportamiento social\n")
                append("‚Ä¢ Huellas y rastros fosilizados\n\n")
                append("üèõÔ∏è Este sitio nos ayuda a entender c√≥mo viv√≠an las criaturas del ${getPeriodDisplayName(periodId)}.")
            }
            "site_2" -> buildString {
                append("üî¨ ${site.description}\n\n")
                append("‚öóÔ∏è Investigaciones actuales:\n")
                append("‚Ä¢ An√°lisis de is√≥topos para determinar dieta\n")
                append("‚Ä¢ Estudios de crecimiento √≥seo\n")
                append("‚Ä¢ Reconstrucci√≥n paleoambiental\n\n")
                append("üìä Los datos obtenidos aqu√≠ revolucionan nuestro conocimiento del per√≠odo.")
            }
            "site_3" -> buildString {
                append("üî≠ ${site.description}\n\n")
                append("üëÅÔ∏è Desde aqu√≠ puedes observar:\n")
                append("‚Ä¢ Estratos geol√≥gicos del per√≠odo\n")
                append("‚Ä¢ Formaciones rocosas caracter√≠sticas\n")
                append("‚Ä¢ Evidencia de cambios clim√°ticos\n\n")
                append("üåç Una ventana √∫nica al mundo prehist√≥rico.")
            }
            "site_4" -> buildString {
                append("‚è∞ ${site.description}\n\n")
                append("üåÄ Capacidades del portal:\n")
                append("‚Ä¢ Visualizaci√≥n de paleoambientes\n")
                append("‚Ä¢ Simulaci√≥n de ecosistemas antiguos\n")
                append("‚Ä¢ Experiencia inmersiva 4D\n\n")
                append("‚ú® ¬°Viaja ${getPeriodTimeTravel(periodId)} y experimenta el pasado!")
            }
            else -> "${site.description}\n\nUn lugar verdaderamente especial para explorar este fascinante per√≠odo de la historia de la Tierra."
        }
    }

    private fun getPeriodDisplayName(periodId: String): String {
        return when (periodId) {
            "triassic" -> "Tri√°sico"
            "jurassic" -> "Jur√°sico" 
            "cretaceous" -> "Cret√°cico"
            "devonian" -> "Dev√≥nico"
            "carboniferous" -> "Carbon√≠fero"
            "permian" -> "P√©rmico"
            "paleogene" -> "Pale√≥geno"
            "neogene" -> "Ne√≥geno"
            "quaternary" -> "Cuaternario"
            else -> "per√≠odo prehist√≥rico"
        }
    }

    private fun getPeriodTimeTravel(periodId: String): String {
        return when (periodId) {
            "triassic" -> "252 millones de a√±os atr√°s"
            "jurassic" -> "201 millones de a√±os atr√°s"
            "cretaceous" -> "145 millones de a√±os atr√°s"
            "devonian" -> "419 millones de a√±os atr√°s"
            "carboniferous" -> "359 millones de a√±os atr√°s"
            "permian" -> "299 millones de a√±os atr√°s"
            "paleogene" -> "66 millones de a√±os atr√°s"
            "neogene" -> "23 millones de a√±os atr√°s"
            "quaternary" -> "2.6 millones de a√±os atr√°s"
            else -> "millones de a√±os atr√°s"
        }
    }

    private fun createExplorationSitesData(periodId: String): List<ExplorationSite> {
        return listOf(
            ExplorationSite(
                id = "site_1",
                name = "Yacimiento F√≥sil Principal",
                description = "Sitio de excavaci√≥n con los espec√≠menes m√°s importantes y mejor conservados del per√≠odo",
                type = InterestPointType.FOSSIL_SITE,
                iconResource = R.drawable.ic_fossil_site
            ),
            ExplorationSite(
                id = "site_2",
                name = "Laboratorio de Investigaci√≥n",
                description = "Centro de an√°lisis paleontol√≥gico donde se estudian los hallazgos m√°s recientes",
                type = InterestPointType.RESEARCH_STATION,
                iconResource = R.drawable.ic_research_station
            ),
            ExplorationSite(
                id = "site_3",
                name = "Mirador Geol√≥gico",
                description = "Punto estrat√©gico para observar las formaciones rocosas y estratos del per√≠odo",
                type = InterestPointType.OBSERVATION_POINT,
                iconResource = R.drawable.ic_observation_point
            ),
            ExplorationSite(
                id = "site_4",
                name = "Portal Temporal",
                description = "Simulador avanzado que te transporta visualmente al ecosistema prehist√≥rico",
                type = InterestPointType.TIME_PORTAL,
                iconResource = R.drawable.ic_time_portal
            )
        )
    }

    companion object {
        private const val ARG_PERIOD_ID = "period_id"

        fun newInstance(periodId: String): ExploreFragment {
            return ExploreFragment().apply {
                arguments = Bundle().apply {
                    putString(ARG_PERIOD_ID, periodId)
                }
            }
        }
    }
}

/**
 * Modelo de datos para sitios de exploraci√≥n
 */
data class ExplorationSite(
    val id: String,
    val name: String,
    val description: String,
    val type: InterestPointType,
    val iconResource: Int
)